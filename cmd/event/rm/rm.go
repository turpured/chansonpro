// Copyright Â© 2019 VMware, INC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rm

import (
	"context"
	"errors"
	"fmt"

	"github.com/edgexfoundry-holding/edgex-cli/config"

	"github.com/edgexfoundry/go-mod-core-contracts/clients"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/coredata"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/urlclient/local"

	"github.com/spf13/cobra"
)

var name string

// NewCommand return rm events command
func NewCommand() *cobra.Command {
	var cmd = &cobra.Command{
		Use:   "rm [ id | --name]",
		Short: "Remove events generated by given device",
		Long:  `Removes all the events generated by a device given the device's name or id.`,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if len(args) == 0 && name == "" {
				return errors.New("no device id/name provided")
			}
			dc := coredata.NewEventClient(local.New(config.Conf.Clients["CoreData"].Url() + clients.ApiEventRoute))
			var deletedBy string
			if deletedBy = name; name != "" {
				deletedBy = args[0]
			}

			//The second param of DeleteForDevice is double purposed - could be deviceId, deviceName.
			//But for consistence cli command expect --name flag or deviceId provided directly
			err = dc.DeleteForDevice(context.Background(), deletedBy)
			if err != nil {
				return
			}
			fmt.Printf("Events generated by %s have been removed\n", deletedBy)
			return
		},
	}
	cmd.Flags().StringVar(&name, "name", "", "Delete Event by given name")
	return cmd
}
