// Copyright Â© 2019 VMware, INC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rm

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/edgexfoundry/edgex-cli/cmd/notification/rm"
	"github.com/edgexfoundry/edgex-cli/config"
	"github.com/edgexfoundry/edgex-cli/pkg/utils"

	"github.com/edgexfoundry/go-mod-core-contracts/clients"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/coredata"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/urlclient/local"

	"github.com/spf13/cobra"
)

var age string
var unit string
var device string

const errMsg = "events could be removed by one criteria: by id(s), by device name or by age. " +
	"please provide id(s) as argument(s) or provide one flag (--device/--age)"

// NewCommand return rm events command
func NewCommand() *cobra.Command {
	var cmd = &cobra.Command{
		Use:   "rm [ id | --device]",
		Short: "Removes event by its id or removes all events generated by given device",
		Long:  `Removes event by its id or removes all the events generated by a device.`,
		RunE:  eventHandler,
	}
	cmd.Flags().StringVarP(&device, "device", "d", "", "Delete Events by given device name")
	cmd.Flags().StringVarP(&age, "age", "a", "", "Event age (by default in milliseconds). To customize the time unit use --unit flag")
	cmd.Flags().StringVar(&unit, "unit", "ms", rm.TimeUnitUsage)
	return cmd
}

func eventHandler(cmd *cobra.Command, args []string) (err error) {
	if err = validate(args); err != nil {
		return err
	}
	dc := coredata.NewEventClient(local.New(config.Conf.Clients["CoreData"].Url() + clients.ApiEventRoute))
	if age != "" {
		return deleteOld(cmd.Context(), dc)
	} else if len(args) != 0 {
		return deleteByIds(cmd.Context(), dc, args)
	}
	return deleteForDevice(cmd.Context(), dc)
}

func deleteOld(ctx context.Context, dc coredata.EventClient) error {
	ageInt, err := strconv.ParseInt(age, 10, 64)
	if err != nil {
		return err
	}
	if _, present := utils.TimeUnitsMap[unit]; !present {
		return errors.New("List of possible values:\n" + utils.TimeUnitDescriptions)
	}
	ageMilliseconds := utils.ConvertAgeToMillisecond(unit, ageInt)
	err = dc.DeleteOld(ctx, int(ageMilliseconds))
	if err == nil {
		fmt.Printf("Removed: %v %v\n", ageInt, unit)
	}
	return err
}

func deleteForDevice(ctx context.Context, dc coredata.EventClient) (err error) {
	err = dc.DeleteForDevice(ctx, device)
	if err == nil {
		fmt.Printf("Events generated by device `%s` have been removed\n", device)
	}
	return
}

func validate(args []string) error {
	if len(args) == 0 && device == "" && age == "" {
		return errors.New(errMsg)
	}
	if len(args) != 0 && device == "" && age == "" ||
		device != "" && len(args) == 0 && age == "" ||
		age != "" && len(args) == 0 && device == "" {
		return nil
	}
	return errors.New(errMsg)
}

func deleteByIds(ctx context.Context, dc coredata.EventClient, eventIds []string) error {
	for _, eventId := range eventIds {
		err := dc.Delete(ctx, eventId)
		if err == nil {
			fmt.Printf("Event with id %s removed\n", eventId)
		} else {
			fmt.Printf("Error: %s \n", err)
		}
	}
	return nil
}
