// Copyright Â© 2019 VMware, INC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rm

import (
	"context"
	"errors"
	"fmt"

	"github.com/edgexfoundry-holding/edgex-cli/config"

	"github.com/edgexfoundry/go-mod-core-contracts/clients"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/coredata"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/urlclient/local"

	"github.com/spf13/cobra"
)

var device string

// NewCommand return rm events command
func NewCommand() *cobra.Command {
	var cmd = &cobra.Command{
		Use:   "rm [ id | --device]",
		Short: "Removes event by its id or removes all events generated by given device",
		Long:  `Removes event by its id or removes all the events generated by a device.`,
		RunE: func(cmd *cobra.Command, args []string) (err error) {
			if err = validate(args); err != nil {
				return err
			}
			dc := coredata.NewEventClient(local.New(config.Conf.Clients["CoreData"].Url() + clients.ApiEventRoute))
			if len(args) != 0 {
				return deleteByIds(dc, args)
			}
			return deleteForDevice(dc)

		},
	}
	cmd.Flags().StringVar(&device, "device", "", "Delete Events by given device name")
	return cmd
}

func deleteForDevice(dc coredata.EventClient) (err error) {
	err = dc.DeleteForDevice(context.Background(), device)
	if err == nil {
		fmt.Printf("Events generated by device `%s` have been removed\n", device)
	}
	return
}

func validate(args []string) error {
	if len(args) == 0 && device == "" {
		return errors.New("no event id/device name provided")
	}
	if len(args) != 0 && device != "" {
		return errors.New("provide either event id or device name")
	}
	return nil
}


func deleteByIds(dc coredata.EventClient, eventIds []string) error {
	for _, eventId := range eventIds {
		err := dc.Delete(context.Background(), eventId)
		if err == nil{
			fmt.Printf("Event with id %s removed\n", eventId)
		}else{
			fmt.Printf("Error: %s \n", err)
		}
	}
	return nil
}
