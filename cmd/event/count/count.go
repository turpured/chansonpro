package count

import (
	"fmt"

	"github.com/edgexfoundry/edgex-cli/config"
	"github.com/edgexfoundry/edgex-cli/pkg/formatters"

	"github.com/edgexfoundry/go-mod-core-contracts/clients"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/coredata"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/urlclient/local"

	"github.com/spf13/cobra"
)

var device string

func NewCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "count [--device ]",
		Short: "Returns the count of core-data events",
		Long:  `Return a count of the number of events in core data.`,
		RunE:  countHandler,
	}
	cmd.Flags().StringVarP(&device, "device", "d", "", "Returns the count of the events generated by device specified by name.")
	return cmd
}

func countHandler(cmd *cobra.Command, args []string) (err error) {
	client := coredata.NewEventClient(
		local.New(config.Conf.Clients["CoreData"].Url() + clients.ApiEventRoute),
	)
	var countNumber int
	var template string
	if device != "" {
		countNumber, err = client.EventCountForDevice(cmd.Context(), device)
		template = fmt.Sprintf("Events count generated by device %s: %v", device, countNumber)
	} else {
		countNumber, err = client.EventCount(cmd.Context())
		template = fmt.Sprintf("Total events count: %v", countNumber)
	}
	if err != nil {
		return err
	}
	formatter := formatters.NewFormatter(template, nil)
	err = formatter.Write(countNumber)
	return
}
