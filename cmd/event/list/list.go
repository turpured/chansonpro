// Copyright Â© 2019 VMware, INC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package list

import (
	"context"
	"html/template"

	"github.com/edgexfoundry/edgex-cli/config"
	"github.com/edgexfoundry/edgex-cli/pkg/formatters"
	"github.com/edgexfoundry/edgex-cli/pkg/utils"

	"github.com/edgexfoundry/go-mod-core-contracts/clients"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/coredata"
	"github.com/edgexfoundry/go-mod-core-contracts/clients/urlclient/local"
	"github.com/edgexfoundry/go-mod-core-contracts/models"

	"github.com/spf13/cobra"
)

const eventTemplate = "Event ID\tDevice\tOrigin\tCreated\tModified\n" +
	"{{range .}}" +
	"{{.ID}}\t{{.Device}}\t{{.Origin}}\t{{DisplayDuration .Created}}\t{{DisplayDuration .Modified}}\n" +
	"{{end}}"

var limit int
var device string

// NewCommand returns the list device command
func NewCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list",
		Short: "A list of Events",
		Long:  `Return list of Events.`,
		Args:  cobra.MaximumNArgs(1),
		RunE:  listHandler,
	}
	cmd.Flags().IntVarP(&limit, "limit", "l", 50, "Limit number of results")
	cmd.Flags().StringVarP(&device, "device", "d", "", "Events generated by specific device with given name.")
	return cmd
}

func listHandler(cmd *cobra.Command, args []string) (err error) {
	client := coredata.NewEventClient(
		local.New(config.Conf.Clients["CoreData"].Url() + clients.ApiEventRoute),
	)

	var events []models.Event
	if device != "" {
		events, err = client.EventsForDevice(cmd.Context(), device, limit)
	} else if len(args) > 0 {
		events, err = getEvent(cmd.Context(), client, args[0])
	} else {
		events, err = client.Events(cmd.Context())
	}
	if err != nil {
		return err
	}

	formatter := formatters.NewFormatter(eventTemplate, template.FuncMap{"DisplayDuration": utils.DisplayDuration})
	err = formatter.Write(events)
	return
}

func getEvent(ctx context.Context, client coredata.EventClient, id string) ([]models.Event, error) {
	event, err := client.Event(ctx, id)
	if err != nil {
		return nil, err
	}
	return []models.Event{event}, nil
}
